var app = require('../app');
var debug = require('debug')('backend:server');
var http = require('http');
var mongoose = require("mongoose");
mongoose.connect('mongodb://localhost:27017/recipe', { useNewUrlParser: true, useUnifiedTopology: true })
  .then(console.log("Connected! on http://localhost:3001/"))
const Message = require('../model/Message')
const socketIo = require('socket.io');
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3001');
app.set('port', port);


var server = http.createServer(app);
const io = socketIo(server, {
  cors: {
    origin: "http://localhost:3000",
    methods: ["GET", "POST"]
  }
});


io.on('connection', async (socket) => {
  console.log('A user connected');

  // Handle the new 'fetchChatHistory' event
  socket.on('fetchChatHistory', async ({ chefId, userId }, callback) => {
    try {
      // Fetch chat history based on chefId and userId
      const chatHistory = await Message.find({
        $or: [
          { sender: chefId, receiver: userId },
          { sender: userId, receiver: chefId },
        ],
      }).sort({ createdAt: 1 }).lean();

      // Emit the chat history to the connected user
      socket.emit('chatHistory', chatHistory);

      // Invoke the callback with chat history data
      callback(chatHistory);
    } catch (error) {
      console.error('Error fetching chat history from the database:', error.message);
    }
  });


  socket.on('chatMessage', async (message) => {
    console.log('Received message:', message);

    const newMessage = new Message({
      sender: message.sender,
      receiver: message.receiver,
      text: message.text,
    });

    try {
      // Save the message to the database
      await newMessage.save();
      console.log('Message saved to the database:', message);

      // Emit the message to all connected clients
      io.emit('chatMessage', message);
    } catch (error) {
      console.error('Error saving message to the database:', error.message);
    }
  });


  socket.on('disconnect', () => {
    console.log('User disconnected');
  });
});



/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }
  return false;
}

/** 
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}